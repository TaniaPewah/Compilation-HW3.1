// 3.1
%{
    #include "parser.hpp"

    #include<iostream>
    using namespace std;

  	extern int yylex();
	extern int yylineno;
	int yyerror(char const*);
  void printRule(char const*);
	void printStringRule(string);
    SymbolTable symbolTable;
    void checkOpTypes(Node*, Node*, int);
    void exitOnFalse(bool);

%}

%locations

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token ENUM
%token TRUE
%token FALSE
%token ID
%token NUM
%token STRING
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%token IF
%token LBRACE 
%token RBRACE

%left ASSIGN
%left OR
%left AND
%left EQUAL
%left NOTEQUAL
%nonassoc LESS
%nonassoc GREATER
%nonassoc LESSEQUAL
%nonassoc GREATEREQUAL
%left ADD
%left SUB
%left MUL
%left DIV
%right LPAREN RPAREN
%right NOT


%nonassoc NO_ELSE
%nonassoc ELSE

%%

Program : Enums Funcs {
                          if (!symbolTable.hasMain) {
                              output::errorMainMissing();
                              exit(0);
                          }
                      }
;

Funcs : %empty
    | FuncDecl Funcs { }
;

FuncDecl : RetType ID {
            

            if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                output::errorDef($2->lineno, ((IdNode*)$2)->name);
                exit(0);
			}
		}  LPAREN Formals RPAREN {
		    
		   		    //TODO ask guy why we dont need exit on false
            exitOnFalse(symbolTable.addFunction(((IdNode*)$2), ((TypeNode*)$1)->type, ((FormalsNode*)$5)->types, ((FormalsNode*)$5)->names));

            
			$$ = new StatementNode();
		}  LBRACE Statements RBRACE { symbolTable.endScope(); }
;

Enums : %empty
    | EnumDecl Enums {}
;

EnumDecl : ENUM ID {  
                    if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                           output::errorDef($2->lineno, ((IdNode*)$2)->name);
                           exit(0);
                       }
                   } LBRACE EnumeratorList RBRACE SC {
                            $$ = new EnumDeclNode(((IdNode*)$2)->name, $2->lineno);
                            exitOnFalse(symbolTable.addEnum((IdNode*)$2, ((EnumeratorListNode*)$5)->enums));
                            $$ = new StatementNode();
                       }
;

RetType : Type { 
                $$ = $1; }
        | VOID { 
                $$ = $1; }
;

Formals : %empty { 
         $$ = new FormalsNode(); }
    | FormalsList { 
         $$ = new FormalsNode(((FormalsListNode*)$1)->types, ((FormalsListNode*)$1)->names, $1->lineno);
      }
;

FormalsList : FormalDecl { 
                            
                $$ = new FormalsListNode(((FormalDeclNode*)$1)->type, ((FormalDeclNode*)$1)->name, $1->lineno);
            }
        | FormalDecl COMMA FormalsList { 
                $$ = $3;
                ((FormalsListNode*)$$)->add(((FormalDeclNode*)$1)->type, ((FormalDeclNode*)$1)->name, $1->lineno);
            }
;

FormalDecl : Type ID
            { 
                if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                    output::errorDef($2->lineno, ((IdNode*)$2)->name);
                    exit(0);
                }
                exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                $$ = new FormalDeclNode(((TypeNode*)$1)->type, ((IdNode*)$2)->name, $2->lineno);
            }
;


EnumeratorList : Enumerator { 
                            $$ = new EnumeratorListNode(((EnumeratorNode*)$1)->name, $1->lineno);
                        }
    | EnumeratorList COMMA Enumerator { 
                                    $$ = $3;
                                    ((EnumeratorListNode*)$$)->add(((EnumeratorNode*)$1)->name, $1->lineno);
                                }
;

Enumerator : ID {   
                    $$ = new EnumeratorNode(((IdNode*)$1)->name, $1->lineno);
                }
;


Statements : Statement { 
                        $$ = $1; }
        | Statements Statement { 
                        $$ = $2; }
;

Statement : LBRACE MarkerNewInnerScope Statements RBRACE { 
			symbolTable.endScope(); 
      $$ = $2;}
			| Type ID SC { 
                    if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                        output::errorDef($2->lineno, ((IdNode*)$2)->name);
                        exit(0);
                    }

                    exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                 }
			| EnumType ID SC { 
                         if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                             output::errorDef($2->lineno, ((IdNode*)$2)->name);
                             exit(0);
                         }

                         exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                     }
			| EnumDecl { 
                     $$ = $1;
               }
			| Type ID ASSIGN Exp SC { 
                          if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                              output::errorDef($2->lineno, ((IdNode*)$2)->name);
                              exit(0);
                          }

                          Types type = ((TypeNode*)$1)->type;
                          Types expType = ((ExpNode*)$4)->type;
                          if (expType != type && !(type == INT_TYPE && expType == BYTE_TYPE)){
                              output::errorMismatch($1->lineno);
                              exit(0);
                          }
                          exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                          $$ = new StatementNode();
                          }
			| EnumType ID ASSIGN Exp SC { 
                                  if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                                      output::errorDef($2->lineno, ((IdNode*)$2)->name);
                                      exit(0);
                                  }

                                  Types type = ((TypeNode*)$1)->type;
                                  Types expType = ((ExpNode*)$4)->type;
                                  if (expType != type && !(type == INT_TYPE && expType == BYTE_TYPE)){
                                      output::errorMismatch($1->lineno);
                                      exit(0);
                                  }
                                  exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                                  $$ = new StatementNode();
                                }
			| ID ASSIGN Exp SC { 
                           if (!symbolTable.isDefinedVar(((IdNode*)$1)->name)) {
                               output::errorUndef($1->lineno, ((IdNode*)$1)->name);
                               exit(0);
                           }

                           Types idType = symbolTable.getType(((IdNode*)$1)->name);
                           Types expType = ((ExpNode*)$3)->type;
                           if (idType != expType && !(idType == INT_TYPE && expType == BYTE_TYPE)){
                               output::errorMismatch($1->lineno);
                               exit(0);
                           }

                           $$ =  new StatementNode();
                       }
			| Call SC { 
			    $$ = new StatementNode(); }
			| RETURN SC { 
                    if (symbolTable.getCurrentFunctionRetType() != VOID_TYPE) {
                        output::errorMismatch($1->lineno);
                        exit(0);
                    }

                    $$ = new StatementNode();
                }
			| RETURN Exp SC { 
                        Types retType = symbolTable.getCurrentFunctionRetType();
                        if ((retType != ((ExpNode*)$2)->type && !(retType == INT_TYPE && ((ExpNode*)$2)->type == BYTE_TYPE)) || retType == VOID_TYPE) {
                            output::errorMismatch($1->lineno);
                            exit(0);
                        }

                        $$ = new StatementNode();
                    }
			| IfScope %prec NO_ELSE { 
      $$ = $1; }
			| IfScope ELSE MarkerNewInnerScope Statement {
					   symbolTable.endScope();
					   $$ = $1;
					}
			| WHILE  BoolCond MarkerWhileOn Statement { 
			                                            symbolTable.endScope();
                                                          $$ = $4; }
			| BREAK SC { 
                   if (symbolTable.isInWhile() == false) {
                       output::errorUnexpectedBreak($1->lineno);
                       exit(0);
                   }
                   $$ = new StatementNode();
               }
			| CONTINUE SC { 
                      if (symbolTable.isInWhile() == false) {
                          output::errorUnexpectedContinue($1->lineno);
                          exit(0);
                      }
                      $$ = new StatementNode();
                  }
;

IfScope : IF BoolCond MarkerNewInnerScope Statement{ 
		symbolTable.endScope();
		$$ = $4;
		}


BoolCond :  LPAREN Exp RPAREN
	   {    
		   if (((ExpNode*)$2)->type != BOOL_TYPE) {
			   output::errorMismatch($2->lineno);
			   exit(0);
		   }
	   }
;

Call : ID LPAREN ExpList RPAREN
		{   
			if (!symbolTable.isDefinedFunction(((IdNode*)$1)->name)) {
				output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
				exit(0);
			}

			vector<Types> args = symbolTable.getFunctionArgs(((IdNode*)$1)->name);
			if (!((ExpListNode*)$3)->compareType(args)) {
				vector<string> argTypes = typeToStringVector(args);
				output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, argTypes);
				exit(0);
			} 
		
			$$ = new CallNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
		}
	| ID LPAREN RPAREN
		{ 
			if (!symbolTable.isDefinedFunction(((IdNode*)$1)->name)) {
				output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
				exit(0);
			}

			vector<Types> args = symbolTable.getFunctionArgs(((IdNode*)$1)->name);
			if (args.size() != 0) {
				vector<string> argTypes = typeToStringVector(args);
				output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, argTypes);
				exit(0);
			} 
		
			$$ = new CallNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
		}
;


ExpList : Exp { 
   $$ = new ExpListNode(((ExpNode*)$1)->type, $1->lineno);}
    | Exp COMMA ExpList { 
                            $$ = $3;
                            ((ExpListNode*)$$)->add(((ExpNode*)$1)->type);
                        }
;

Type : INT {
        $$ = $1; }
    | BYTE {
        $$ = $1; }
    | BOOL {
        $$ = $1; }
;

EnumType : ENUM ID {
		if (!symbolTable.isEnumDefined(((IdNode*)$2)->name)) {
			output::errorUndefEnum($2->lineno, ((IdNode*)$2)->name);
			exit(0);
		}

   }
;

Exp : LPAREN Exp RPAREN {
        $$ = $2; }
    | Exp ADD Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp SUB Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp MUL Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp DIV Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | ID {
        if (!symbolTable.isDefinedVar(((IdNode*)$1)->name)) {
               output::errorUndef($1->lineno, ((IdNode*)$1)->name);
               exit(0);
           }
           $$ = new ExpNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
         }
    | Call {
        $$ = new ExpNode(((CallNode*)$1)->type, $1->lineno); }
    | NUM {
        $$ = new ExpNode(INT_TYPE, $1->lineno); }
    | NUM B {
                if (((NumNode*)$1)->num > 255) {
                    output::errorByteTooLarge($1->lineno, ((NumNode*)$1)->getAsString());
                    exit(0);
                }
                $$ = new ExpNode(BYTE_TYPE, $1->lineno);
            }
    | STRING {
        $$ = new ExpNode(STRING_TYPE, $1->lineno); }
    | TRUE {
        $$ = new ExpNode(BOOL_TYPE, $1->lineno); }
    | FALSE {
        $$ = new ExpNode(BOOL_TYPE, $1->lineno); }
    | NOT Exp {
        $$ = new ExpNode(((ExpNode*)$2)->type, ((ExpNode*)$2)->type, $2->lineno, (RelopNode*)$1); }
    | Exp AND Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp OR Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp EQUAL Exp {
        $$ = new ExpNode(BOOL_TYPE, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp NOTEQUAL Exp {
        $$ = new ExpNode(BOOL_TYPE, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp LESS Exp {
        $$ = new ExpNode(BOOL_TYPE, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp GREATER Exp {
        $$ = new ExpNode(BOOL_TYPE, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp LESSEQUAL Exp {
        $$ = new ExpNode(BOOL_TYPE, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp GREATEREQUAL Exp {
        $$ = new ExpNode(BOOL_TYPE, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | LPAREN Type RPAREN Exp {
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }

MarkerNewInnerScope : %empty{ symbolTable.newInnerScope(); }
MarkerWhileOn : %empty{ 
        symbolTable.newInnerScope(true /*isWhileScope*/); }

;

%%

int main()
{
    yyparse();
    symbolTable.endScope();
    return 0;
}

int yyerror(char const* message)
{	
	output::errorSyn(yylineno);
	exit(0);
}

void exitOnFalse(bool b) {
    if (!b) {
        exit(0);
    }
}

void printRule(char const* rule){
    cout << "rule " << rule << endl;
}

void printStringRule(string rule ){
    cout << "string " << rule << endl;
}