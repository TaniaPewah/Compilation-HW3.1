%{
    #include "parser.hpp"

    #include<iostream>
    using namespace std;

    int yylex();
    int yyerror(char const*);
    SymbolTable symbolTable;
    void checkOpTypes(Node*, Node*, int);
    void exitOnFalse(bool);

%}

%locations

%token VOID INT BYTE B BOOL ENUM
%token TRUE FALSE
%token RETURN IF ELSE WHILE BREAK CONTINUE
%token PRECOND
%token SC COMMA
%token LPAREN RPAREN LBRACE RBRACE
%token ID NUM STRING

%right NOT
%left AND
%left OR
%right ASSIGN

// relop
%left EQUAL
%left NOTEQUAL
%nonassoc LESS
%nonassoc GREATER
%nonassoc LESSEQUAL
%nonassoc GREATEREQUAL

// binop
%left ADD
%left SUB
%left DIV
%left MUL

%%

Program : Enums Funcs {
                          if (!symbolTable.hasMain) {
                              output::errorMainMissing();
                              exit(0);
                          }
                      }
;

Enums : %empty
    | EnumDecl Enums
;

EnumDecl : ENUM ID {
                       if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                           output::errorDef($2->lineno, ((IdNode*)$2)->name);
                           exit(0);
                       }
                   } LBRACE EnumeratorList RBRACE SC {
                            $$ = new EnumDeclNode(((IdNode*)$2)->name, $2->lineno);
                            exitOnFalse(symbolTable.addEnum((IdNode*)$2, ((EnumeratorListNode*)$4)->enums));
                            $$ = new StatementNode();
                       }
;

EnumeratorList : Enumerator {
                            $$ = new EnumeratorListNode(((EnumeratorNode*)$1)->name, $1->lineno);
                        }
    | EnumeratorList COMMA Enumerator {
                                    $$ = $3;
                                    ((EnumeratorListNode*)$$)->add(((EnumeratorNode*)$1)->name, $1->lineno);
                                }
;

Enumerator : ID {
                    $$ = new EnumeratorNode(((IdNode*)$1)->name, $1->lineno);
                }
;

Funcs : %empty
    | FuncDecl Funcs
;

FuncDecl : RetType ID LPAREN Formals RPAREN {
                if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                    output::errorDef($2->lineno, ((IdNode*)$2)->name);
                    exit(0);
                }
                exitOnFalse(symbolTable.addFunction((IdNode*)$2, ((TypeNode*)$1)->type, ((FormalsNode*)$4)->types, ((FormalsNode*)$4)->names));
                $$ = new StatementNode();
            } LBRACE Statements RBRACE { symbolTable.endScope(); }
;

RetType : Type { $$ = $1; }
        | VOID { $$ = $1; }
;

Formals : %empty {
            $$ = new FormalsNode();
        }
    | FormalsList {
            $$ = new FormalsNode(((FormalsListNode*)$1)->types, ((FormalsListNode*)$1)->names, $1->lineno);
        }
;

FormalsList : FormalDecl {
                $$ = new FormalsListNode(((FormalDeclNode*)$1)->type, ((FormalDeclNode*)$1)->name, $1->lineno);
            }

        | FormalDecl COMMA FormalsList {
                $$ = $3;
                ((FormalsListNode*)$$)->add(((FormalDeclNode*)$1)->type, ((FormalDeclNode*)$1)->name, $1->lineno);
            }
;

FormalDecl : Type ID
            {
                if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                    output::errorDef($2->lineno, ((IdNode*)$2)->name);
                    exit(0);
                }
                exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                $$ = new FormalDeclNode(((TypeNode*)$1)->type, ((IdNode*)$2)->name, $2->lineno);
            }
;

Statements : Statement { $$ = $1; }
        | Statements Statement { $$ = $2; }
;

Statement : LBRACE NewScope Statements RBRACE { symbolTable.endScope(); }
    | Type ID SC {
                    if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                        output::errorDef($2->lineno, ((IdNode*)$2)->name);
                        exit(0);
                    }

                    exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                 }
    | EnumType ID SC {
                         if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                             output::errorDef($2->lineno, ((IdNode*)$2)->name);
                             exit(0);
                         }

                         exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                     }
    | EnumDecl {
                     $$ = $1;
               }
    | Type ID ASSIGN Exp SC {
                          if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                              output::errorDef($2->lineno, ((IdNode*)$2)->name);
                              exit(0);
                          }

                          Types type = ((TypeNode*)$1)->type;
                          Types expType = ((ExpNode*)$4)->type;
                          if (expType != type && !(type == INT_TYPE && expType == BYTE_TYPE)){
                              output::errorMismatch($1->lineno);
                              exit(0);
                          }
                          exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                          $$ = new StatementNode();
                          }
    | EnumType ID ASSIGN Exp SC {
                                  if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                                      output::errorDef($2->lineno, ((IdNode*)$2)->name);
                                      exit(0);
                                  }

                                  Types type = ((TypeNode*)$1)->type;
                                  Types expType = ((ExpNode*)$4)->type;
                                  if (expType != type && !(type == INT_TYPE && expType == BYTE_TYPE)){
                                      output::errorMismatch($1->lineno);
                                      exit(0);
                                  }
                                  exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                                  $$ = new StatementNode();
                                }
    | ID ASSIGN Exp SC {
                           if (!symbolTable.isDefinedVar(((IdNode*)$1)->name)) {
                               output::errorUndef($1->lineno, ((IdNode*)$1)->name);
                               exit(0);
                           }

                           Types idType = symbolTable.getType(((IdNode*)$1)->name);
                           Types expType = ((ExpNode*)$3)->type;
                           if (idType != expType && !(idType == INT_TYPE && expType == BYTE_TYPE)){
                               output::errorMismatch($1->lineno);
                               exit(0);
                           }

                           $$ =  new StatementNode();
                       }
    | Call SC {
                  $$ = new StatementNode();
              }
    | RETURN SC {
                    if (symbolTable.getCurrentFunctionRetType() != VOID_TYPE) {
                        output::errorMismatch($1->lineno);
                        exit(0);
                    }

                    $$ = new StatementNode();
                }
    | RETURN Exp SC {
                        Types retType = symbolTable.getCurrentFunctionRetType();
                        if ((retType != ((ExpNode*)$2)->type && !(retType == INT_TYPE && ((ExpNode*)$2)->type == BYTE_TYPE)) || retType == VOID_TYPE) {
                            output::errorMismatch($1->lineno);
                            exit(0);
                        }

                        $$ = new StatementNode();
                    }
    | IF LPAREN Exp RPAREN NewScope Statement %prec NO_ELSE {
                                                       Types cond = ((ExpNode*)$3)->type;
                                                       if (cond != BOOL_TYPE) {
                                                           output::errorMismatch($1->lineno);
                                                           exit(0);
                                                       }
                                                       symbolTable.endScope();

                                                       $$ = $4;
                                                   }
    | IF LPAREN Exp RPAREN NewScope Statement ELSE Statement {
                                                       Types cond = ((ExpNode*)$3)->type;
                                                       if (cond != BOOL_TYPE) {
                                                            output::errorMismatch($1->lineno);
                                                            exit(0);
                                                       }
                                                       symbolTable.endScope();

                                                       $$ = $4;
                                                    }
    | WHILE MarkerWhileOn LPAREN Exp RPAREN Statement {
                                                       Types cond = ((ExpNode*)$3)->type;
                                                       if (cond != BOOL_TYPE) {
                                                              output::errorMismatch($1->lineno);
                                                              exit(0);
                                                          }
                                                          symbolTable.endScope();

                                                          $$ = $4;
                                                      }
    | BREAK SC {
                   if (symbolTable.isInWhile() == false) {
                       output::errorUnexpectedBreak($1->lineno);
                       exit(0);
                   }

                   $$ = new StatementNode();
               }
    | CONTINUE SC {
                      if (symbolTable.isInWhile() == false) {
                          output::errorUnexpectedContinue($1->lineno);
                          exit(0);
                      }

                      $$ = new StatementNode();
                  }
;

EnumType : ENUM ID {
                        if (!symbolTable.isEnumDefined(((IdNode*)$2)->name)) {
                            output::errorUndefEnum($2->lineno, ((IdNode*)$2)->name);
                            exit(0);
                        }

                   }
;

MarkerWhileOn : %empty {
                            symbolTable.newInnerScope(true /*isWhileScope*/);
                        }
;

NewScope : %empty
                    {
                        symbolTable.newInnerScope();
                    }
;

Call : ID LPAREN ExpList RPAREN
                        {
                            if (!symbolTable.isDefinedFunction(((IdNode*)$1)->name)) {
                                output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
                                exit(0);
                            }

                            vector<Types> args = symbolTable.getFunctionArgs(((IdNode*)$1)->name);
                            if (!((ExpListNode*)$3)->compareType(args)) {
                                vector<string> argTypes = typeToStringVector(args);
                                output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, argTypes);
                                exit(0);
                            } 
                        
                            $$ = new CallNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
                        }
                    | ID LPAREN RPAREN
                        {
                            if (!symbolTable.isDefinedFunction(((IdNode*)$1)->name)) {
                                output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
                                exit(0);
                            }

                            vector<Types> args = symbolTable.getFunctionArgs(((IdNode*)$1)->name);
                            if (args.size() != 0) {
                                vector<string> argTypes = typeToStringVector(args);
                                output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, argTypes);
                                exit(0);
                            } 
                        
                            $$ = new CallNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
                        }
;

ExpList : Exp {  }
    | Exp COMMA ExpList {  }
;

Type : INT
        { $$ = $1; }
    | BYTE
        { $$ = $1; }
    | BOOL
        { $$ = $1; }
;

Exp : LPAREN Exp RPAREN { $$ = $2; }
    | Exp ADD Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp SUB Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp MUL Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp DIV Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | ID { if (!symbolTable.isDefinedVar(((IdNode*)$1)->name)) {
               output::errorUndef($1->lineno, ((IdNode*)$1)->name);
               exit(0);
           }

           $$ = new ExpNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
         }
    | Call { $$ = new ExpNode(((CallNode*)$1)->type, $1->lineno); }
    | NUM { $$ = new ExpNode(INT_TYPE, $1->lineno); }
    | NUM B {
                if (((NumNode*)$1)->num > 255) {
                    output::errorByteTooLarge($1->lineno, ((NumNode*)$1)->getAsString());
                    exit(0);
                }
                $$ = new ExpNode(BYTE_TYPE, $1->lineno);
            }
    | STRING { $$ = new ExpNode(STRING_TYPE, $1->lineno); }
    | TRUE {  $$ = new ExpNode(BOOL_TYPE, $1->lineno); }
    | FALSE { $$ = new ExpNode(BOOL_TYPE, $1->lineno); }
    | NOT Exp { $$ = new ExpNode(((ExpNode*)$2)->type, ((ExpNode*)$2)->type, $2->lineno, (RelopNode*)$1); }
    | Exp AND Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp OR Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp EQUAL Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp NOTEQUAL Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp LESS Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp GREATER Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp LESSEQUAL Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp GREATEREQUAL Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | LPAREN Type RPAREN Exp { $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }

%%

int main()
{
    yyparse();
    symbolTable.endScope();
    return 0;
}

void exitOnFalse(bool b) {
    if (!b) {
        exit(0);
    }
}
