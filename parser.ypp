// 3.1
%{
    #include "parser.hpp"

    #include<iostream>
    using namespace std;

  	extern int yylex();
	extern int yylineno;
	int yyerror(char const*);
	void printRule(char const*);
    SymbolTable symbolTable;
    void checkOpTypes(Node*, Node*, int);
    void exitOnFalse(bool);

%}

%locations

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token ENUM
%token TRUE
%token FALSE
%token ID
%token NUM
%token STRING
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%token IF
%token LBRACE 
%token RBRACE

%left ASSIGN
%left OR
%left AND
%left EQUAL
%left NOTEQUAL
%nonassoc LESS
%nonassoc GREATER
%nonassoc LESSEQUAL
%nonassoc GREATEREQUAL
%left ADD
%left SUB
%left MUL
%left DIV
%right LPAREN RPAREN
%right NOT


%nonassoc NO_ELSE
%nonassoc ELSE

%%

Program : Enums Funcs {
                          if (!symbolTable.hasMain) {
                              output::errorMainMissing();
                              exit(0);
                          }
                      }
;

Funcs : %empty
    | FuncDecl Funcs { printRule("Funcs ");}
;

FuncDecl : RetType ID { printRule("FuncDecl ");
		if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
			output::errorDef($2->lineno, ((IdNode*)$2)->name);
			exit(0);
			}
		} 
		LPAREN Formals RPAREN {

			   exitOnFalse(symbolTable.addFunction(((IdNode*)$2), ((TypeNode*)$1)->type,
			   ((FormalsNode*)$5)->types, ((FormalsNode*)$5)->names));
			$$ = new StatementNode();
		} 
		LBRACE Statements RBRACE { symbolTable.endScope(); }
;

Enums : %empty
    | EnumDecl Enums {printRule("Enums ");}
;

EnumDecl : ENUM ID {  printRule("EnumDecl ");
                    if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                           output::errorDef($2->lineno, ((IdNode*)$2)->name);
                           exit(0);
                       }
                   } LBRACE EnumeratorList RBRACE SC {
                            $$ = new EnumDeclNode(((IdNode*)$2)->name, $2->lineno);
                            exitOnFalse(symbolTable.addEnum((IdNode*)$2, ((EnumeratorListNode*)$5)->enums));
                            $$ = new StatementNode();
                       }
;

RetType : Type { printRule("RetType type ");
                $$ = $1; }
        | VOID { printRule("RetType void");
                $$ = $1; }
;

Formals : %empty { printRule("Formals ");
        $$ = new FormalsNode(); }
    | FormalsList { printRule("Formals ");
         $$ = new FormalsNode(((FormalsListNode*)$1)->types, ((FormalsListNode*)$1)->names, $1->lineno);
        }
;

FormalsList : FormalDecl { printRule("FormalsList ");
                $$ = new FormalsListNode(((FormalDeclNode*)$1)->type, ((FormalDeclNode*)$1)->name, $1->lineno);
            }

        | FormalDecl COMMA FormalsList { printRule("FormalsList ");
                $$ = $3;
                ((FormalsListNode*)$$)->add(((FormalDeclNode*)$1)->type, ((FormalDeclNode*)$1)->name, $1->lineno);
            }
;

FormalDecl : Type ID
            { printRule("FormalDecl ");
                if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                    output::errorDef($2->lineno, ((IdNode*)$2)->name);
                    exit(0);
                }
                exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                $$ = new FormalDeclNode(((TypeNode*)$1)->type, ((IdNode*)$2)->name, $2->lineno);
            }
;


EnumeratorList : Enumerator { printRule("Enumerator list ");
                            $$ = new EnumeratorListNode(((EnumeratorNode*)$1)->name, $1->lineno);
                        }
    | EnumeratorList COMMA Enumerator { printRule("Enumerator list ");
                                    $$ = $3;
                                    ((EnumeratorListNode*)$$)->add(((EnumeratorNode*)$1)->name, $1->lineno);
                                }
;

Enumerator : ID {   printRule("Enumerator ");
                    $$ = new EnumeratorNode(((IdNode*)$1)->name, $1->lineno);
                }
;


Statements : Statement { printRule("Statements ");
                        $$ = $1; }
        | Statements Statement { printRule("Statements ");
                        $$ = $2; }
;

Statement : LBRACE { printRule("Statement open scope");
            symbolTable.newInnerScope();}
			Statements RBRACE { printRule("Statement end scope");
			symbolTable.endScope(); }
			| Type ID SC { printRule("Statement decl id ");
                    if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                        output::errorDef($2->lineno, ((IdNode*)$2)->name);
                        exit(0);
                    }

                    exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                 }
			| EnumType ID SC { printRule("Statement enumdecl id ");
                         if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                             output::errorDef($2->lineno, ((IdNode*)$2)->name);
                             exit(0);
                         }

                         exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                     }
			| EnumDecl { printRule("Statement enum decl");
                     $$ = $1;
               }
			| Type ID ASSIGN Exp SC { printRule("Statement decl id assign");
                          if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                              output::errorDef($2->lineno, ((IdNode*)$2)->name);
                              exit(0);
                          }

                          Types type = ((TypeNode*)$1)->type;
                          Types expType = ((ExpNode*)$4)->type;
                          if (expType != type && !(type == INT_TYPE && expType == BYTE_TYPE)){
                              output::errorMismatch($1->lineno);
                              exit(0);
                          }
                          exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                          $$ = new StatementNode();
                          }
			| EnumType ID ASSIGN Exp SC { printRule("Statement enum id assign");
                                  if (symbolTable.isAlreadyDefined(((IdNode*)$2)->name)) {
                                      output::errorDef($2->lineno, ((IdNode*)$2)->name);
                                      exit(0);
                                  }

                                  Types type = ((TypeNode*)$1)->type;
                                  Types expType = ((ExpNode*)$4)->type;
                                  if (expType != type && !(type == INT_TYPE && expType == BYTE_TYPE)){
                                      output::errorMismatch($1->lineno);
                                      exit(0);
                                  }
                                  exitOnFalse(symbolTable.addVar((IdNode*)$2, ((TypeNode*)$1)->type));
                                  $$ = new StatementNode();
                                }
			| ID ASSIGN Exp SC { printRule("Statement id assign");
                           if (!symbolTable.isDefinedVar(((IdNode*)$1)->name)) {
                               output::errorUndef($1->lineno, ((IdNode*)$1)->name);
                               exit(0);
                           }

                           Types idType = symbolTable.getType(((IdNode*)$1)->name);
                           Types expType = ((ExpNode*)$3)->type;
                           if (idType != expType && !(idType == INT_TYPE && expType == BYTE_TYPE)){
                               output::errorMismatch($1->lineno);
                               exit(0);
                           }

                           $$ =  new StatementNode();
                       }
			| Call SC { printRule("Statement call");
			    $$ = new StatementNode(); }
			| RETURN SC { printRule("Statement return");
                    if (symbolTable.getCurrentFunctionRetType() != VOID_TYPE) {
                        output::errorMismatch($1->lineno);
                        exit(0);
                    }

                    $$ = new StatementNode();
                }
			| RETURN Exp SC { printRule("Statement return exp");
                        Types retType = symbolTable.getCurrentFunctionRetType();
                        if ((retType != ((ExpNode*)$2)->type && !(retType == INT_TYPE && ((ExpNode*)$2)->type == BYTE_TYPE)) || retType == VOID_TYPE) {
                            output::errorMismatch($1->lineno);
                            exit(0);
                        }

                        $$ = new StatementNode();
                    }
			| IfScope %prec NO_ELSE { printRule("Statement IfScope"); }
			| IfScope ELSE {printRule("Statement IfScope");
			    symbolTable.newInnerScope();}
				Statement {

					   symbolTable.endScope();
					   $$ = $4;
					}
			| WHILE MarkerWhileOn BoolCond Statement { printRule("Statement WHILE");
			                                            symbolTable.endScope();
                                                          $$ = $4; }
			| BREAK SC { printRule("Statement break");
                   if (symbolTable.isInWhile() == false) {
                       output::errorUnexpectedBreak($1->lineno);
                       exit(0);
                   }
                   $$ = new StatementNode();
               }
			| CONTINUE SC { printRule("IfScope");
                      if (symbolTable.isInWhile() == false) {
                          output::errorUnexpectedContinue($1->lineno);
                          exit(0);
                      }
                      $$ = new StatementNode();
                  }
;

IfScope : IF BoolCond Statement{ printRule("IfScope");
		symbolTable.endScope();
		$$ = $3;
		}


BoolCond :  LPAREN Exp RPAREN
	   {    printRule("BoolCond");
		   if (((ExpNode*)$2)->type != BOOL_TYPE) {
			   output::errorMismatch($2->lineno);
			   exit(0);
		   }
	   }
;

Call : ID LPAREN ExpList RPAREN
		{   printRule("Call");
			if (!symbolTable.isDefinedFunction(((IdNode*)$1)->name)) {
				output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
				exit(0);
			}

			vector<Types> args = symbolTable.getFunctionArgs(((IdNode*)$1)->name);
			if (!((ExpListNode*)$3)->compareType(args)) {
				vector<string> argTypes = typeToStringVector(args);
				output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, argTypes);
				exit(0);
			} 
		
			$$ = new CallNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
		}
	| ID LPAREN RPAREN
		{ printRule("Call");
			if (!symbolTable.isDefinedFunction(((IdNode*)$1)->name)) {
				output::errorUndefFunc($1->lineno, ((IdNode*)$1)->name);
				exit(0);
			}

			vector<Types> args = symbolTable.getFunctionArgs(((IdNode*)$1)->name);
			if (args.size() != 0) {
				vector<string> argTypes = typeToStringVector(args);
				output::errorPrototypeMismatch($1->lineno, ((IdNode*)$1)->name, argTypes);
				exit(0);
			} 
		
			$$ = new CallNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
		}
;


MarkerWhileOn : %empty { printRule("MarkerWhileOn");
        symbolTable.newInnerScope(true /*isWhileScope*/); }
;

ExpList : Exp { printRule("ExpList");  }
    | Exp COMMA ExpList { printRule("ExpList");
                            $$ = $3;
                            ((ExpListNode*)$$)->add(((ExpNode*)$1)->type);
                        }
;

Type : INT {printRule("Type");
        $$ = $1; }
    | BYTE {printRule("Type");
        $$ = $1; }
    | BOOL {printRule("Type");
        $$ = $1; }
;

EnumType : ENUM ID {printRule("EnumType");
		if (!symbolTable.isEnumDefined(((IdNode*)$2)->name)) {
			output::errorUndefEnum($2->lineno, ((IdNode*)$2)->name);
			exit(0);
		}

   }
;

Exp : LPAREN Exp RPAREN {printRule("Exp");
        $$ = $2; }
    | Exp ADD Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp SUB Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp MUL Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | Exp DIV Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (BinopNode*)$2); }
    | ID {printRule("Exp");
        if (!symbolTable.isDefinedVar(((IdNode*)$1)->name)) {
               output::errorUndef($1->lineno, ((IdNode*)$1)->name);
               exit(0);
           }

           $$ = new ExpNode(symbolTable.getType(((IdNode*)$1)->name), $1->lineno);
         }
    | Call {printRule("Exp");
        $$ = new ExpNode(((CallNode*)$1)->type, $1->lineno); }
    | NUM {printRule("Exp");
        $$ = new ExpNode(INT_TYPE, $1->lineno); }
    | NUM B {printRule("Exp");
                if (((NumNode*)$1)->num > 255) {
                    output::errorByteTooLarge($1->lineno, ((NumNode*)$1)->getAsString());
                    exit(0);
                }
                $$ = new ExpNode(BYTE_TYPE, $1->lineno);
            }
    | STRING {printRule("Exp");
        $$ = new ExpNode(STRING_TYPE, $1->lineno); }
    | TRUE {printRule("Exp");
        $$ = new ExpNode(BOOL_TYPE, $1->lineno); }
    | FALSE {printRule("Exp");
        $$ = new ExpNode(BOOL_TYPE, $1->lineno); }
    | NOT Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$2)->type, ((ExpNode*)$2)->type, $2->lineno, (RelopNode*)$1); }
    | Exp AND Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp OR Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp EQUAL Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp NOTEQUAL Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp LESS Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp GREATER Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp LESSEQUAL Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | Exp GREATEREQUAL Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }
    | LPAREN Type RPAREN Exp {printRule("Exp");
        $$ = new ExpNode(((ExpNode*)$1)->type, ((ExpNode*)$3)->type, $2->lineno, (RelopNode*)$2); }

%%

int main()
{
    yyparse();
    symbolTable.endScope();
    return 0;
}

int yyerror(char const* message)
{	
	output::errorSyn(yylineno);
	exit(0);
}

void exitOnFalse(bool b) {

    if (!b) {
        exit(0);
    }
}

void printRule(char const* rule){
    cout << rule << endl;
}
